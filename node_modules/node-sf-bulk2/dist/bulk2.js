"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class BulkAPI2 {
    constructor(connection) {
        this.connection = connection;
        this.endpoint = connection.instanceUrl + '/services/data/v' + connection.apiVersion;
        if (this.connection.isTooling) {
            this.endpoint += '/tooling';
        }
        this.endpoint += '/jobs';
    }
    getRequestConfig(contentType, accept) {
        const headers = {
            'Content-Type': contentType,
            Authorization: 'Bearer ' + this.connection.accessToken,
            accept: accept
        };
        const requestConfig = {
            headers
        };
        requestConfig.maxBodyLength = Infinity;
        requestConfig.maxContentLength = Infinity;
        return requestConfig;
    }
    submitBulkQueryJob(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = JSON.stringify(query);
            const endpoint = this.endpoint + '/query';
            const requestConfig = this.getRequestConfig('application/json', 'application/json');
            const axiosresponse = yield axios_1.default.post(endpoint, body, requestConfig);
            const queryResponse = axiosresponse.data;
            return queryResponse;
        });
    }
    getBulkQueryJobInfo(jobId) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = this.endpoint + '/query/' + jobId;
            const requestConfig = this.getRequestConfig('application/json', 'application/json');
            const axiosresponse = yield axios_1.default.get(endpoint, requestConfig);
            const queryResponse = axiosresponse.data;
            return queryResponse;
        });
    }
    getAllBulkQueryJobInfo(configInput) {
        return __awaiter(this, void 0, void 0, function* () {
            let endpoint = this.endpoint + '/query';
            if (configInput && Object.keys(configInput).length > 0) {
                endpoint += '/?';
                let i = 0;
                let key;
                for (key in configInput) {
                    endpoint += key + '=' + configInput[key];
                    if (i < (Object.keys(configInput).length - 1)) {
                        endpoint += '&';
                    }
                    i++;
                }
            }
            const requestConfig = this.getRequestConfig('application/json', 'application/json');
            const axiosresponse = yield axios_1.default.get(endpoint, requestConfig);
            const queryResponse = axiosresponse.data;
            return queryResponse;
        });
    }
    abortBulkQueryJob(jobId) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = this.endpoint + '/query/' + jobId;
            const requestConfig = this.getRequestConfig('application/json', 'application/json');
            const body = JSON.stringify({
                state: 'Aborted'
            });
            const axiosresponse = yield axios_1.default.patch(endpoint, body, requestConfig);
            const queryResponse = axiosresponse.data;
            return queryResponse;
        });
    }
    getBulkQueryResults(jobId, locator, maxRecords) {
        return __awaiter(this, void 0, void 0, function* () {
            let endpoint = this.endpoint + '/query/' + jobId + '/results';
            if (locator) {
                endpoint += '?locator=' + locator;
                if (maxRecords) {
                    endpoint += '&maxRecords=' + maxRecords;
                }
            }
            else {
                if (maxRecords) {
                    endpoint += '?maxRecords=' + maxRecords;
                }
            }
            const requestConfig = this.getRequestConfig('application/json', 'text/csv');
            const axiosresponse = yield axios_1.default.get(endpoint, requestConfig);
            return axiosresponse;
        });
    }
    createDataUploadJob(jobUploadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = this.endpoint + '/ingest';
            const requestConfig = this.getRequestConfig('application/json; charset=UTF-8', 'application/json');
            const axiosresponse = yield axios_1.default.post(endpoint, JSON.stringify(jobUploadRequest), requestConfig);
            const jobuploadresponse = axiosresponse.data;
            return jobuploadresponse;
        });
    }
    uploadJobData(contenturl, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = this.connection.instanceUrl + '/' + contenturl;
            const requestConfig = this.getRequestConfig('text/csv', 'application/json');
            const axiosresponse = yield axios_1.default.put(endpoint, data, requestConfig);
            return axiosresponse.status;
        });
    }
    closeOrAbortJob(jobId, state) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = this.endpoint + '/ingest/' + jobId;
            const body = JSON.stringify({
                state: state
            });
            const requestConfig = this.getRequestConfig('application/json', 'application/json');
            const axiosresponse = yield axios_1.default.patch(endpoint, body, requestConfig);
            const jobuploadresponse = axiosresponse.data;
            return jobuploadresponse;
        });
    }
    getIngestJobInfo(jobId) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = this.endpoint + '/ingest/' + jobId;
            const requestConfig = this.getRequestConfig('application/json', 'application/json');
            const axiosresponse = yield axios_1.default.get(endpoint, requestConfig);
            const queryResponse = axiosresponse.data;
            return queryResponse;
        });
    }
    getResults(jobId, resulttype) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = this.endpoint + '/ingest/' + jobId + '/' + resulttype;
            const requestConfig = this.getRequestConfig('application/json', 'text/csv');
            const axiosresponse = yield axios_1.default.get(endpoint, requestConfig);
            return axiosresponse.data;
        });
    }
}
exports.default = BulkAPI2;
//# sourceMappingURL=bulk2.js.map